type User {
    id: ID!
    firstName: String!
    middleName: String
    lastName: String!
    email:String!
    password:String!
    verified:Boolean!
}

type Profile {
    id: ID!
    bio:String
    authorId: Int
}

type Post {
    id: ID!
    title: String!
    subtitle: String!
    content: String!
    published: Boolean
    authorId:Int
}

type Job {
    id: ID!
    title: String!
    subtitle: String!
    content: String!
    published: Boolean
    authorId:Int
}

type Query {
    jobs: [Job!]!
    job(id: ID!): Job!
    user(id: ID!): User!
    posts:[Post!]! ,
    post(id:ID!): Post,
}

# INFO Generic Error Response
type ErrorResponse {
    message:String!
    code: String!
}

# REGISTRATION RESPONSE
type RegistrationResponse {
    success:Boolean!
    code:Int!
    error:ErrorResponse
    data:User
}

type Mutation {
    register(email: String!, password:String!): RegistrationResponse
    login(email: String!, password:String!): User
    post(title:String!,subtitle:String!,content:String!): Post
}